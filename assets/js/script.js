function initializeTheme() {
  const themeToggle = document.getElementById('theme-toggle');
  if (!themeToggle) return;

  if (localStorage.getItem('theme') === 'dark') {
    document.body.classList.add('dark-theme');
    themeToggle.textContent = 'üåô';
  } else {
    themeToggle.textContent = '‚òÄÔ∏è';
  }

  themeToggle.addEventListener('click', () => {
    document.body.classList.toggle('dark-theme');
    themeToggle.textContent = document.body.classList.contains('dark-theme') ? 'üåô' : '‚òÄÔ∏è';
    localStorage.setItem('theme', document.body.classList.contains('dark-theme') ? 'dark' : 'light');
  });
}

initializeTheme();

Promise.all([
  fetch('assets/data/prompts.json').then(res => {
    if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ prompts.json');
    return res.json();
  }),
  fetch('assets/data/premium_prompts.json').then(res => {
    if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ premium_prompts.json');
    return res.json();
  })
])
  .then(([basicData, premiumData]) => {
    const prompts = basicData.prompts || [];
    const premiumPrompts = premiumData.prompts || [];
    let filteredPrompts = prompts;
    let currentPage = 1;
    const promptsPerPage = 20;

    function displayPromptCount() {
      const basicCount = prompts.length;
      const premiumCount = premiumPrompts.length;
      const basicCountElement = document.getElementById('basic-prompt-count');
      const premiumCountElement = document.getElementById('premium-prompt-count');
      if (basicCountElement) basicCountElement.textContent = basicCount;
      if (premiumCountElement) premiumCountElement.textContent = premiumCount;
    }

    const translations = {
      category: {
        copywriting: '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥',
        sales: '–ü—Ä–æ–¥–∞–∂–∏',
        hr: 'HR',
        blogging: '–ë–ª–æ–≥–≥–∏–Ω–≥',
        youtube: 'YouTube',
        marketing: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
        design: '–î–∏–∑–∞–π–Ω',
        programming: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
        education: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
        smm: 'SMM',
        analytics: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
        idea_generation: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π',
        translations: '–ü–µ—Ä–µ–≤–æ–¥—ã',
        content_strategy: '–ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è',
        support: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤',
        ecommerce: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã',
        seo: 'SEO',
        data_analysis: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
        creative_writing: '–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø–∏—Å—å–º–æ',
        video_editing: '–í–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂',
        project_management: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏',
        personal_branding: '–õ–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥–∏–Ω–≥',
        gamification: '–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è',
        email_marketing: 'Email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥',
        ux_ui: 'UX/UI',
        market_research: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞',
        presentation_design: '–î–∏–∑–∞–π–Ω –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π',
        chatbot_development: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-–±–æ—Ç–æ–≤',
        content_curation: '–ö—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
        business_strategy: '–ë–∏–∑–Ω–µ—Å-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è'
      },
      difficulty: {
        beginner: '–ù–æ–≤–∏—á–æ–∫',
        intermediate: '–°—Ä–µ–¥–Ω–∏–π',
        advanced: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'
      }
    };

    const difficultyMapping = {
      beginner: '–ù–æ–≤–∏—á–æ–∫',
      intermediate: '–°—Ä–µ–¥–Ω–∏–π',
      advanced: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'
    };

    function populateCategories() {
      const categoryFilter = document.getElementById('category-filter');
      if (!categoryFilter) return;

      const categories = [...new Set(prompts.map(p => p.category).filter(c => c))].sort();
      categoryFilter.innerHTML = '<option value="all">–í—Å–µ</option>';
      categories.forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = translations.category[category] || category;
        categoryFilter.appendChild(option);
      });
    }

    function displayPrompts(promptsToShow) {
      const container = document.getElementById('prompts-container');
      if (!container) return;

      container.innerHTML = '';

      if (promptsToShow.length === 0) {
        container.innerHTML = '<p>–ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
      }

      const start = (currentPage - 1) * promptsPerPage;
      const end = start + promptsPerPage;
      const paginatedPrompts = promptsToShow.slice(start, end);

      paginatedPrompts.forEach(prompt => {
        const card = document.createElement('div');
        card.className = 'prompt-card';
        card.innerHTML = `
          <h3>${prompt.task || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
          <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${translations.category[prompt.category] || prompt.category}</p>
          <p><strong>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</strong> ${translations.difficulty[prompt.difficulty] || prompt.difficulty}</p>
          <p><strong>–ü—Ä–æ–º–ø—Ç (—Ä—É—Å—Å–∫–∏–π):</strong> ${prompt.prompt || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
          <p><strong>–ü—Ä–æ–º–ø—Ç (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π):</strong> ${prompt.prompt_en || '–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
          <button class="copy-btn" data-prompt-id="${prompt.id}">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
        `;
        container.appendChild(card);
      });

      document.querySelectorAll('.copy-btn').forEach(button => {
        button.addEventListener('click', () => {
          const promptText = button.parentElement.querySelector('p:nth-child(4)').textContent.replace('–ü—Ä–æ–º–ø—Ç (—Ä—É—Å—Å–∫–∏–π): ', '');
          navigator.clipboard.writeText(promptText).then(() => {
            const notification = document.createElement('div');
            notification.className = 'notification';
            notification.textContent = '–ü—Ä–æ–º–ø—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!';
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 2000);
          });
          console.log(`–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç ID: ${button.dataset.promptId}`);
        });
      });

      displayPagination(promptsToShow);
    }

    function displayPagination(promptsToShow) {
      const paginationTop = document.getElementById('pagination-top');
      const paginationBottom = document.getElementById('pagination');
      if (!paginationTop || !paginationBottom) return;

      paginationTop.innerHTML = '';
      paginationBottom.innerHTML = '';
      const pageCount = Math.ceil(promptsToShow.length / promptsPerPage);

      for (let i = 1; i <= pageCount; i++) {
        [paginationTop, paginationBottom].forEach(pagination => {
          const button = document.createElement('button');
          button.textContent = i;
          button.className = i === currentPage ? 'pagination-btn active' : 'pagination-btn';
          button.addEventListener('click', () => {
            currentPage = i;
            displayPrompts(promptsToShow);
            window.scrollTo({ top: 0, behavior: 'smooth' });
          });
          pagination.appendChild(button);
        });
      }
    }

    function filterPrompts() {
      const category = document.getElementById('category-filter');
      const difficulty = document.getElementById('difficulty-filter');
      const search = document.getElementById('search-input');

      if (!category || !difficulty || !search) return;

      filteredPrompts = prompts.filter(prompt => {
        const matchesCategory = category.value === 'all' || prompt.category === category.value;
        const matchesDifficulty = difficulty.value === 'all' || 
                                 (difficultyMapping[difficulty.value] && prompt.difficulty === difficultyMapping[difficulty.value]);
        const matchesSearch = search.value === '' || 
                             (prompt.task && prompt.task.toLowerCase().includes(search.value.toLowerCase())) || 
                             (prompt.prompt && prompt.prompt.toLowerCase().includes(search.value.toLowerCase()));
        return matchesCategory && matchesDifficulty && matchesSearch;
      });

      currentPage = 1;
      displayPrompts(filteredPrompts);
    }

    displayPromptCount();
    populateCategories();

    const categoryFilter = document.getElementById('category-filter');
    const difficultyFilter = document.getElementById('difficulty-filter');
    const searchInput = document.getElementById('search-input');

    if (categoryFilter) categoryFilter.addEventListener('change', () => {
      currentPage = 1;
      filterPrompts();
    });
    if (difficultyFilter) difficultyFilter.addEventListener('change', () => {
      currentPage = 1;
      filterPrompts();
    });
    if (searchInput) searchInput.addEventListener('input', () => {
      currentPage = 1;
      filterPrompts();
    });

    if (document.getElementById('prompts-container')) {
      displayPrompts(prompts);
    }

    const scrollTopBtn = document.getElementById('scroll-top-btn');
    if (scrollTopBtn) {
      window.addEventListener('scroll', () => {
        scrollTopBtn.style.display = window.scrollY > 200 ? 'block' : 'none';
      });
      scrollTopBtn.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }

    const yearElement = document.getElementById('year');
    if (yearElement) {
      yearElement.textContent = `2025${new Date().getFullYear() > 2025 ? `-${new Date().getFullYear()}` : ''}`;
    }
  })
  .catch(error => {
    console.error('–û—à–∏–±–∫–∞:', error);
    const container = document.getElementById('prompts-container');
    if (container) container.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.</p>';
  });